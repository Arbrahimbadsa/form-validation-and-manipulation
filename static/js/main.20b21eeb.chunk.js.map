{"version":3,"sources":["components/Input.js","components/SelectInput.js","components/ProfileForm.js","App.js","reportWebVitals.js","index.js"],"names":["Input","props","useField","field","meta","htmlFor","className","label","name","id","autoComplete","touched","error","class","SelectInput","value","options","map","option","initialValues","first_name","last_name","email","country","address","city","state","zip","validationSchema","yup","required","ProfileForm","onSubmit","values","alert","JSON","stringify","formik","handleSubmit","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA0BeA,EAxBD,SAACC,GACb,MAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,qCACE,uBACEC,QAAQ,aACRC,UAAU,0CAFZ,SAIGL,EAAMM,QAET,2DACEC,KAAML,EAAMK,KACZC,GAAIN,EAAMK,KACVE,aAAa,OACTP,GACAF,GALN,IAMEK,UAAU,qJAEXF,EAAKO,SAAWP,EAAKQ,OACpB,mBAAGC,MAAM,mCAAT,SAA6CT,EAAKQ,YCgB3CE,EAnCK,SAACb,GACnB,MAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,qCACE,uBACEC,QAAQ,UACRC,UAAU,0CAFZ,SAIGL,EAAMM,QAET,4DACEE,GAAIN,EAAMK,KACVA,KAAML,EAAMK,KACZO,MAAOd,EAAMe,SAAWf,EAAMe,QAAQ,IAClCb,GACAF,GALN,IAMES,aAAa,MACbJ,UAAU,+JAPZ,SASGL,EAAMe,QACLf,EAAMe,QAAQC,KAAI,SAACC,GAAD,OAChB,wBAA2BH,MAAOG,EAAOH,MAAzC,SACGG,EAAOH,OADGG,EAAOH,UAKtB,yDAGHX,EAAKO,SAAWP,EAAKQ,OACpB,mBAAGC,MAAM,mCAAT,SAA6CT,EAAKQ,Y,OC3BpDO,EAAgB,CACpBC,WAAY,GACZC,UAAW,GACXC,MAAO,GACPC,QAAS,aACTC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,IAAK,IAGDC,EAAmBC,IAAW,CAClCT,WAAYS,MAAaC,SAAS,0BAClCT,UAAWQ,MAAaC,SAAS,yBACjCR,MAAOO,MAAaP,QAAQQ,SAAS,iCACrCP,QAASM,MAAaC,SAAS,8BAC/BN,QAASK,MAAaC,SAAS,uBAC/BL,KAAMI,MAAaC,SAAS,oBAC5BJ,MAAOG,MAAaC,SAAS,8BAC7BH,IAAKE,MAAaC,SAAS,4BAmFdC,EAhFK,WAOlB,OACE,qBAAKzB,UAAU,wDAAf,SACE,cAAC,IAAD,CACEa,cAAeA,EACfS,iBAAkBA,EAClBI,SAXmB,SAACC,GAIxBC,MAAMC,KAAKC,UAAUH,EAAQ,KAAM,KAIjC,SAKG,SAACI,GAAD,OACC,sBACE3B,aAAa,MACbJ,UAAU,WACV0B,SAAUK,EAAOC,aAHnB,SAKE,sBAAKhC,UAAU,uCAAf,UACE,qBAAKA,UAAU,4BAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,2BAAf,SACE,cAAC,EAAD,CAAOC,MAAM,aAAagC,KAAK,OAAO/B,KAAK,iBAG7C,qBAAKF,UAAU,2BAAf,SACE,cAAC,EAAD,CAAOC,MAAM,YAAYgC,KAAK,OAAO/B,KAAK,gBAG5C,qBAAKF,UAAU,2BAAf,SACE,cAAC,EAAD,CAAOiC,KAAK,QAAQhC,MAAM,gBAAgBC,KAAK,YAGjD,qBAAKF,UAAU,2BAAf,SACE,cAAC,EAAD,CACEC,MAAM,iBACNC,KAAK,UACLQ,QAAS,CACP,CAAED,MAAO,cACT,CAAEA,MAAO,SACT,CAAEA,MAAO,eAKf,qBAAKT,UAAU,aAAf,SACE,cAAC,EAAD,CAAOiC,KAAK,OAAOhC,MAAM,iBAAiBC,KAAK,cAGjD,qBAAKF,UAAU,yCAAf,SACE,cAAC,EAAD,CAAOiC,KAAK,OAAOhC,MAAM,OAAOC,KAAK,WAGvC,qBAAKF,UAAU,yCAAf,SACE,cAAC,EAAD,CAAOiC,KAAK,OAAOhC,MAAM,mBAAmBC,KAAK,YAGnD,qBAAKF,UAAU,yCAAf,SACE,cAAC,EAAD,CAAOiC,KAAK,OAAOhC,MAAM,eAAeC,KAAK,eAInD,qBAAKF,UAAU,0CAAf,SACE,wBACEiC,KAAK,SACLjC,UAAU,iOAFZ,+BCnFDkC,MARf,WACE,OACE,qBAAKlC,UAAU,MAAf,SACE,cAAC,EAAD,OCQSmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.20b21eeb.chunk.js","sourcesContent":["import { useField } from \"formik\";\r\n\r\nconst Input = (props) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label\r\n        htmlFor=\"first_name\"\r\n        className=\"block text-sm font-medium text-gray-700\"\r\n      >\r\n        {props.label}\r\n      </label>\r\n      <input\r\n        name={field.name}\r\n        id={field.name}\r\n        autoComplete=\"off\"\r\n        {...field}\r\n        {...props}\r\n        className=\"mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md border border-gray-100 h-10 p-3\"\r\n      />\r\n      {meta.touched && meta.error && (\r\n        <p class=\"text-red-500 text-xs italic pt-2\">{meta.error}</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Input;\r\n","import { useField } from \"formik\";\r\n\r\nconst SelectInput = (props) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label\r\n        htmlFor=\"country\"\r\n        className=\"block text-sm font-medium text-gray-700\"\r\n      >\r\n        {props.label}\r\n      </label>\r\n      <select\r\n        id={field.name}\r\n        name={field.name}\r\n        value={props.options && props.options[0]}\r\n        {...field}\r\n        {...props}\r\n        autoComplete=\"off\"\r\n        className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n      >\r\n        {props.options ? (\r\n          props.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.value}\r\n            </option>\r\n          ))\r\n        ) : (\r\n          <option>No option found.</option>\r\n        )}\r\n      </select>\r\n      {meta.touched && meta.error && (\r\n        <p class=\"text-red-500 text-xs italic pt-2\">{meta.error}</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default SelectInput;\r\n","import { Formik } from \"formik\";\r\nimport Input from \"./Input\";\r\nimport SelectInput from \"./SelectInput\";\r\nimport * as yup from \"yup\";\r\n\r\nconst initialValues = {\r\n  first_name: \"\",\r\n  last_name: \"\",\r\n  email: \"\",\r\n  country: \"Bangladesh\",\r\n  address: \"\",\r\n  city: \"\",\r\n  state: \"\",\r\n  zip: \"\",\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  first_name: yup.string().required(\"First name is required\"),\r\n  last_name: yup.string().required(\"Last name is required\"),\r\n  email: yup.string().email().required(\"Provide a valid email address\"),\r\n  country: yup.string().required(\"Country/Region is required\"),\r\n  address: yup.string().required(\"Address is required\"),\r\n  city: yup.string().required(\"City is required\"),\r\n  state: yup.string().required(\"State/Province is required\"),\r\n  zip: yup.string().required(\"Zip/Postal is required\"),\r\n});\r\n\r\nconst ProfileForm = () => {\r\n  const handleFormSubmit = (values) => {\r\n    // handle form submit\r\n    // you can use the values here\r\n    // send to server or maybe manipulate it :)\r\n    alert(JSON.stringify(values, null, 2));\r\n  };\r\n  return (\r\n    <div className=\"bg-gray-100 h-screen flex justify-center items-center\">\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleFormSubmit}\r\n      >\r\n        {(formik) => (\r\n          <form\r\n            autoComplete=\"off\"\r\n            className=\"max-w-md\"\r\n            onSubmit={formik.handleSubmit}\r\n          >\r\n            <div className=\"shadow overflow-hidden sm:rounded-md\">\r\n              <div className=\"px-4 py-5 bg-white sm:p-6\">\r\n                <div className=\"grid grid-cols-6 gap-6\">\r\n                  <div className=\"col-span-6 sm:col-span-3\">\r\n                    <Input label=\"First Name\" type=\"text\" name=\"first_name\" />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-6 sm:col-span-3\">\r\n                    <Input label=\"Last Name\" type=\"text\" name=\"last_name\" />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-6 sm:col-span-4\">\r\n                    <Input type=\"email\" label=\"Email Address\" name=\"email\" />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-6 sm:col-span-3\">\r\n                    <SelectInput\r\n                      label=\"Country/Region\"\r\n                      name=\"country\"\r\n                      options={[\r\n                        { value: \"Bangladesh\" },\r\n                        { value: \"India\" },\r\n                        { value: \"Bhutan\" },\r\n                      ]}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-6\">\r\n                    <Input type=\"text\" label=\"Street Address\" name=\"address\" />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-6 sm:col-span-6 lg:col-span-2\">\r\n                    <Input type=\"text\" label=\"City\" name=\"city\" />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-6 sm:col-span-3 lg:col-span-2\">\r\n                    <Input type=\"text\" label=\"State / Province\" name=\"state\" />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-6 sm:col-span-3 lg:col-span-2\">\r\n                    <Input type=\"text\" label=\"Zip / Postal\" name=\"zip\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"px-4 py-3 bg-gray-50 text-right sm:px-6\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                >\r\n                  Save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","import ProfileForm from \"./components/ProfileForm\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProfileForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}